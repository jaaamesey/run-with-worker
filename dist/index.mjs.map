{"version":3,"sources":["../src/index.ts"],"sourcesContent":["const WORKER_URL = URL.createObjectURL(\n  new Blob([\n    \"onmessage = (m) => (async function(){}).constructor(m.data.funcStr)(m.data.args)\",\n  ]),\n);\n\ntype ExtraReturnFields = { cancel: () => void; worker: Worker };\n\nexport function runWithWorker<T, D extends Readonly<[...any]>>(\n  task: (\n    ...deps: {\n      [i in keyof D]: Awaited<D[i]> extends infer R extends Record<\n        string,\n        unknown\n      >\n        ? R extends { _$trustedScriptUrl: string }\n          ? Awaited<D[i]>\n          : { _$trustedScriptUrl: never } & {\n              [f in keyof R]: R[f] extends Function ? never : R[f];\n            }\n        : Awaited<D[i]>;\n    } & Array<any>\n  ) => T,\n  deps?: Readonly<[...D]>,\n  opts?: { workerOptions?: WorkerOptions; executionTimeoutMs?: number },\n): Promise<T> & ExtraReturnFields {\n  const worker = new Worker(WORKER_URL, opts?.workerOptions);\n\n  let capturedReject: undefined | ((e: unknown) => void);\n  const promise: Promise<T> & Partial<ExtraReturnFields> = new Promise(\n    async (resolve, reject) => {\n      try {\n        capturedReject = reject;\n        const awaitedDeps = await Promise.all(deps ?? []);\n        const args = awaitedDeps.map((d) => {\n          if (typeof d?._$trustedScriptUrl === \"string\") {\n            return {\n              $__trustedScript: `import(${JSON.stringify(d._$trustedScriptUrl)})`,\n            };\n          }\n          return d;\n        });\n        const funcStr = `Promise.all(arguments[0].map(d => d && typeof d.$__trustedScript === 'string' ? eval(d.$__trustedScript) : d)).then(deps => (${task.toString()})(...deps)).then(r=>postMessage(r)).catch(e=>postMessage({$__error:e}))`;\n        worker.onmessage = (m) => {\n          m.data?.$__error ? reject(m.data?.$__error) : resolve(m.data);\n          worker.terminate();\n        };\n        worker.onerror = (e) => {\n          reject(e);\n          worker.terminate();\n        };\n        worker.onmessageerror = (e) => {\n          reject(e);\n          worker.terminate();\n        };\n        if (opts?.executionTimeoutMs != null) {\n          setTimeout(\n            () =>\n              reject(\n                new TaskTimeoutError(\n                  `Task exceeded ${opts.executionTimeoutMs}ms`,\n                ),\n              ),\n            opts.executionTimeoutMs,\n          );\n        }\n        worker.postMessage({ funcStr, args });\n      } catch (e) {\n        reject(e);\n      }\n    },\n  );\n\n  promise.cancel = () => {\n    worker.terminate();\n    capturedReject?.(new TaskCancellationError(\"Task cancelled\"));\n  };\n  promise.worker = worker;\n\n  return promise as Promise<T> & ExtraReturnFields;\n}\n\nexport class TaskCancellationError extends Error {}\nexport class TaskTimeoutError extends Error {}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,IAAM,aAAa,IAAI;AAAA,EACrB,IAAI,KAAK;AAAA,IACP;AAAA,EACF,CAAC;AACH;AAIO,SAAS,cACd,MAcA,MACA,MACgC;AAChC,QAAM,SAAS,IAAI,OAAO,YAAY,6BAAM,aAAa;AAEzD,MAAI;AACJ,QAAM,UAAmD,IAAI;AAAA,IAC3D,CAAO,SAAS,WAAW;AACzB,UAAI;AACF,yBAAiB;AACjB,cAAM,cAAc,MAAM,QAAQ,IAAI,sBAAQ,CAAC,CAAC;AAChD,cAAM,OAAO,YAAY,IAAI,CAAC,MAAM;AAClC,cAAI,QAAO,uBAAG,wBAAuB,UAAU;AAC7C,mBAAO;AAAA,cACL,kBAAkB,UAAU,KAAK,UAAU,EAAE,kBAAkB,CAAC;AAAA,YAClE;AAAA,UACF;AACA,iBAAO;AAAA,QACT,CAAC;AACD,cAAM,UAAU,gIAAgI,KAAK,SAAS,CAAC;AAC/J,eAAO,YAAY,CAAC,MAAM;AA3ClC;AA4CU,mBAAE,SAAF,mBAAQ,YAAW,QAAO,OAAE,SAAF,mBAAQ,QAAQ,IAAI,QAAQ,EAAE,IAAI;AAC5D,iBAAO,UAAU;AAAA,QACnB;AACA,eAAO,UAAU,CAAC,MAAM;AACtB,iBAAO,CAAC;AACR,iBAAO,UAAU;AAAA,QACnB;AACA,eAAO,iBAAiB,CAAC,MAAM;AAC7B,iBAAO,CAAC;AACR,iBAAO,UAAU;AAAA,QACnB;AACA,aAAI,6BAAM,uBAAsB,MAAM;AACpC;AAAA,YACE,MACE;AAAA,cACE,IAAI;AAAA,gBACF,iBAAiB,KAAK,kBAAkB;AAAA,cAC1C;AAAA,YACF;AAAA,YACF,KAAK;AAAA,UACP;AAAA,QACF;AACA,eAAO,YAAY,EAAE,SAAS,KAAK,CAAC;AAAA,MACtC,SAAS,GAAG;AACV,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AAAA,EACF;AAEA,UAAQ,SAAS,MAAM;AACrB,WAAO,UAAU;AACjB,qDAAiB,IAAI,sBAAsB,gBAAgB;AAAA,EAC7D;AACA,UAAQ,SAAS;AAEjB,SAAO;AACT;AAEO,IAAM,wBAAN,cAAoC,MAAM;AAAC;AAC3C,IAAM,mBAAN,cAA+B,MAAM;AAAC;","names":[]}